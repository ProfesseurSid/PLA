/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(ComportementRobots)
package Parsing;
import Engine.*;

public class ComportementRobots
{
  public static void main(String args []) throws ParseException
  {
    ComportementRobots parser = new ComportementRobots(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.println("Enter an expression :");
      //try
      //{
      //ComportementRobots.loop();
      Arbre a = ComportementRobots.loop();
      System.out.println(a.toString());
      /*}
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        ComportementRobots.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }*/
    }
  }
}

PARSER_END(ComportementRobots)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < STAR : "*" >
| < AO : "{" >
| < AF : "}" >
| < PV : ";" >
| < OU : "|" >
| < DP : ":" >
| < PREF : ">" >
}

/*
TOKEN :
{
  < ACTION : < LETTER > >
| < #LETTER : [ "H", "K", "O", "J", "P" ] >
}
*/

Arbre loop() :
{
  Arbre fd;
}
{
  < STAR > < AO > fd = comp() < AF >
  {
    return new Arbre(new Star(), null, fd);
  }
}

Arbre comp() :
{
  Arbre fg, fd;
}
{
  fg = action() fd = op()
  {
    if (fd != null)
    {
      fd.AjouterFilsGauche(fg);
      return fd;
    }
    else return fg;
  }
| fg = loop()
  {
    return fg;
  }
| < AO > fg = comp() < AF > fd = op()
  {
    fd.AjouterFilsGauche(fg);
    return fd;
  }
}

Arbre action() :
{
  Arbre retour;
}
{
  //< ACTION > (< DP >)*
  "H" retour = dp
  (
    new Hit()
  )
  {
    return retour;
  }
| "K" retour = dp
  (
    new Kamikaze()
  )
  {
    return retour;
  }
| "O" retour = dp
  (
    new Others()
  )
  {
    return retour;
  }
| "J" retour = dp
  (
    new Rapport()
  )
  {
    return retour;
  }
| "P" retour = dp
  (
    new Protect()
  )
  {
    return retour;
  }
}

Arbre dp(Operateurs o) :
{
  Arbre retour;
}
{
  {
    retour = new Arbre(o);
  }
  (
    < DP >
    {
      retour = new Arbre(new DeuxPoints(), null, retour);
    }
  )*
  {
    return retour;
  }
}

Arbre op() :
{
  Arbre fd, fg;
}
{
  < PREF > fd = comp()
  {
    return new Arbre(new Preference(), null, fd);
  }
| fg = ou() fd = pv()
  {
    if (fd != null && fg != null) fd.AjouterFilsDroit(fg);
    return fd;
  }
}

Arbre pv() :
{
  Arbre fd, retour;
}
{
  {
    retour = new Arbre(new PointVirgule());
  }
  (
    < PV > fd = comp()
    {
      retour.AjouterFilsDroit(fd);
    }
  )*
  {
    if (retour.droit() == null) 
    return null;
    else 
    return retour;
  }
}

Arbre ou() :
{
  Arbre fd, retour;
}
{
  {
    retour = new Arbre(new Barre());
  }
  (
    < OU > fd = comp()
    {
      retour.AjouterFilsDroit(fd);
    }
  )*
  {
    if (retour.droit() == null) 
    return null;
    else 
    return retour;
  }
}
